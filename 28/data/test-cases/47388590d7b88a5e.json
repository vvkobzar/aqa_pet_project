{"uid":"47388590d7b88a5e","name":"Change date and time","fullName":"tests.ui_tests.widgets_test.TestDatePickerPage#test_change_date_and_time","historyId":"49c187820f07b7113a29ec4fdd027d40","time":{"start":1724766935310,"stop":1724766940059,"duration":4749},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"react-datepicker__month-read-view--selected-month\">...</span> is not clickable at point (820, 368). Other element would receive the click: <div class=\"react-datepicker__year-option\">...</div>\n  (Session info: headless chrome=112.0.5615.165)","statusTrace":"self = <ui_tests.widgets_test.TestWidgets.TestDatePickerPage object at 0x7fcae5664050>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"45950bded1d895f6999540add377cf07\")>\n\n    @allure.title(\"Change date and time\")\n    def test_change_date_and_time(self, driver):\n        date_picker_page = DatePickerPage(driver)\n        date_picker_page.open()\n    \n        selected_year = date_picker_page.select_year_from_date_and_time_field()\n>       selected_month, selected_day = date_picker_page.select_month_and_day_from_date_and_time_field()\n\ntests/ui_tests/widgets_test.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/widgets_page.py:173: in select_month_and_day_from_date_and_time_field\n    self.element_is_visible(self.locators.DATE_AND_TIME_MONTH).click()\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcae56b98e0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...eact-datepicker__year-option\\\\\">...\\\\u003C/div>\\\\n  (Session info: headless chrome=112.0.5615.165)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"react-datepicker__month-read-view--selected-month\">...</span> is not clickable at point (820, 368). Other element would receive the click: <div class=\"react-datepicker__year-option\">...</div>\nE         (Session info: headless chrome=112.0.5615.165)\n\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1724766888431,"stop":1724766888590,"duration":159},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1724766934510,"stop":1724766935309,"duration":799},"status":"passed","steps":[{"name":"Setting up chrome browser with headless=True, page_load_strategy=eager","time":{"start":1724766934510,"stop":1724766935306,"duration":796},"status":"passed","steps":[{"name":"Starting Chrome browser for the test","time":{"start":1724766934510,"stop":1724766935305,"duration":795},"status":"passed","steps":[{"name":"Applying headless options for Chrome","time":{"start":1724766934510,"stop":1724766934510,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"react-datepicker__month-read-view--selected-month\">...</span> is not clickable at point (820, 368). Other element would receive the click: <div class=\"react-datepicker__year-option\">...</div>\n  (Session info: headless chrome=112.0.5615.165)","statusTrace":"self = <ui_tests.widgets_test.TestWidgets.TestDatePickerPage object at 0x7fcae5664050>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"45950bded1d895f6999540add377cf07\")>\n\n    @allure.title(\"Change date and time\")\n    def test_change_date_and_time(self, driver):\n        date_picker_page = DatePickerPage(driver)\n        date_picker_page.open()\n    \n        selected_year = date_picker_page.select_year_from_date_and_time_field()\n>       selected_month, selected_day = date_picker_page.select_month_and_day_from_date_and_time_field()\n\ntests/ui_tests/widgets_test.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/widgets_page.py:173: in select_month_and_day_from_date_and_time_field\n    self.element_is_visible(self.locators.DATE_AND_TIME_MONTH).click()\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcae56b98e0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...eact-datepicker__year-option\\\\\">...\\\\u003C/div>\\\\n  (Session info: headless chrome=112.0.5615.165)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"react-datepicker__month-read-view--selected-month\">...</span> is not clickable at point (820, 368). Other element would receive the click: <div class=\"react-datepicker__year-option\">...</div>\nE         (Session info: headless chrome=112.0.5615.165)\n\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Open page with URL: https://demoqa.com/date-picker","time":{"start":1724766935310,"stop":1724766936939,"duration":1629},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Select year out of date and time field","time":{"start":1724766936939,"stop":1724766938739,"duration":1800},"status":"passed","steps":[{"name":"Wait for element to be visible","time":{"start":1724766936939,"stop":1724766937202,"duration":263},"status":"passed","steps":[{"name":"Wait for element to be present","time":{"start":1724766936939,"stop":1724766936987,"duration":48},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', \"//input[@id='dateAndTimePickerInput']\")"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Scrolling to element","time":{"start":1724766936988,"stop":1724766937003,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"element","value":"<selenium.webdriver.remote.webelement.WebElement (session=\"45950bded1d895f6999540add377cf07\", element=\"9eea3fb5-8e96-491f-921d-d40fa981e57e\")>"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', \"//input[@id='dateAndTimePickerInput']\")"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Wait for element to be visible","time":{"start":1724766937846,"stop":1724766938080,"duration":234},"status":"passed","steps":[{"name":"Wait for element to be present","time":{"start":1724766937846,"stop":1724766937945,"duration":99},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', \"//span[@class='react-datepicker__year-read-view--selected-year']\")"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Scrolling to element","time":{"start":1724766937945,"stop":1724766937966,"duration":21},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"element","value":"<selenium.webdriver.remote.webelement.WebElement (session=\"45950bded1d895f6999540add377cf07\", element=\"6f09a4f5-8a91-4370-ad66-9bf5d84cca45\")>"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', \"//span[@class='react-datepicker__year-read-view--selected-year']\")"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Wait for all elements to be present","time":{"start":1724766938468,"stop":1724766938537,"duration":69},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', \"//div[@class='react-datepicker__year-option']\")"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Year selected: ","time":{"start":1724766938593,"stop":1724766938739,"duration":146},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":8,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Select month and day out of date and time field","time":{"start":1724766938739,"stop":1724766940057,"duration":1318},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"react-datepicker__month-read-view--selected-month\">...</span> is not clickable at point (820, 368). Other element would receive the click: <div class=\"react-datepicker__year-option\">...</div>\n  (Session info: headless chrome=112.0.5615.165)\n\n","statusTrace":"  File \"/usr/local/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/usr/workspace/pages/widgets_page.py\", line 173, in select_month_and_day_from_date_and_time_field\n    self.element_is_visible(self.locators.DATE_AND_TIME_MONTH).click()\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Wait for element to be visible","time":{"start":1724766938740,"stop":1724766938932,"duration":192},"status":"passed","steps":[{"name":"Wait for element to be present","time":{"start":1724766938740,"stop":1724766938852,"duration":112},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', \"//span[@class='react-datepicker__month-read-view--selected-month']\")"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Scrolling to element","time":{"start":1724766938852,"stop":1724766938888,"duration":36},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"element","value":"<selenium.webdriver.remote.webelement.WebElement (session=\"45950bded1d895f6999540add377cf07\", element=\"0265cbf0-0f01-4aec-8ec4-08f4bb2ef91a\")>"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', \"//span[@class='react-datepicker__month-read-view--selected-month']\")"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Taking screenshot on failure","time":{"start":1724766940189,"stop":1724766940570,"duration":381},"status":"passed","steps":[],"attachments":[{"uid":"8f9b180465eed0eb","name":"Failure Screenshot","source":"8f9b180465eed0eb.png","type":"image/png","size":647272}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":15,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1724766940571,"stop":1724766940648,"duration":77},"status":"passed","steps":[{"name":"Quitting the browser","time":{"start":1724766940571,"stop":1724766940648,"duration":77},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"story","value":"Date Picker"},{"name":"feature","value":"Widgets"},{"name":"epic","value":"UI Tests"},{"name":"parentSuite","value":"tests.ui_tests"},{"name":"suite","value":"widgets_test"},{"name":"subSuite","value":"TestWidgets"},{"name":"host","value":"bc591dfab915"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.ui_tests.widgets_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":5,"unknown":0,"total":8},"items":[{"uid":"c7bd8db1f3b6fbaf","reportUrl":"https://vvkobzar.github.io/aqa_pet_project/27//#testresult/c7bd8db1f3b6fbaf","status":"passed","time":{"start":1724766695540,"stop":1724766702995,"duration":7455}},{"uid":"3d017bf200286c9a","reportUrl":"https://vvkobzar.github.io/aqa_pet_project/26//#testresult/3d017bf200286c9a","status":"passed","time":{"start":1724765743183,"stop":1724765747986,"duration":4803}},{"uid":"37515240d069ecce","reportUrl":"https://vvkobzar.github.io/aqa_pet_project/25//#testresult/37515240d069ecce","status":"passed","time":{"start":1724765293237,"stop":1724765298408,"duration":5171}},{"uid":"aa079bbb42d24764","reportUrl":"https://vvkobzar.github.io/aqa_pet_project/25//#testresult/aa079bbb42d24764","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"react-datepicker__month-read-view--selected-month\">...</span> is not clickable at point (820, 208). Other element would receive the click: <div class=\"react-datepicker__year-option\">...</div>\n  (Session info: headless chrome=112.0.5615.165)","time":{"start":1724759912434,"stop":1724759917368,"duration":4934}},{"uid":"aa2155f593321e72","reportUrl":"https://vvkobzar.github.io/aqa_pet_project/24//#testresult/aa2155f593321e72","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"react-datepicker__month-read-view--selected-month\">...</span> is not clickable at point (820, 256). Other element would receive the click: <div class=\"react-datepicker__year-option\">...</div>\n  (Session info: headless chrome=112.0.5615.165)","time":{"start":1724749616071,"stop":1724749620307,"duration":4236}},{"uid":"1f6254e902b2b29c","reportUrl":"https://vvkobzar.github.io/aqa_pet_project/23//#testresult/1f6254e902b2b29c","status":"passed","time":{"start":1724664372384,"stop":1724664377577,"duration":5193}},{"uid":"6600b827488cb390","reportUrl":"https://vvkobzar.github.io/aqa_pet_project/22//#testresult/6600b827488cb390","status":"passed","time":{"start":1724663823966,"stop":1724663828963,"duration":4997}}]},"tags":[]},"source":"47388590d7b88a5e.json","parameterValues":[]}